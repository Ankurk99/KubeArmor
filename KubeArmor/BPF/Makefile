ifeq (,$(KRNDIR))
	KRNVER = $(shell uname -r)
ifneq (,$(wildcard /lib/modules/$(KRNVER)/build/Kconfig))
	KRNDIR = /lib/modules/$(KRNVER)/build
else ifneq (,$(wildcard /lib/modules/$(KRNVER)/source/Kconfig))
	KRNDIR = /lib/modules/$(KRNVER)/source
else ifneq (,$(wildcard /etc/redhat-release))
	KRNDIR = /usr/src/$(KRNVER)
else
	KRNDIR = /usr/src/linux-headers-$(KRNVER)
endif
endif

LIBBPF = $(CURDIR)/libbpf


UNAME_M := $(shell uname -m)
UNAME_R := $(shell uname -r)

ifeq ($(UNAME_M),x86_64)
   ARCH = x86_64
   LINUX_ARCH = x86
   GO_ARCH = amd64
endif

ifeq ($(UNAME_M),aarch64)
   ARCH = arm64
   LINUX_ARCH = arm64
   GO_ARCH = arm64
endif

CL  = clang
CC  = gcc
Q   = @

ifeq ($(V),1)
  Q =
endif

# shamelessly copied from kernel's samples/bpf/Makefile
KF = -I$(KRNDIR)/arch/$(LINUX_ARCH)/include -I$(KRNDIR)/arch/$(LINUX_ARCH)/include/generated  \
	 -I$(KRNDIR)/include -I$(KRNDIR)/arch/$(LINUX_ARCH)/include/uapi \
	 -I$(KRNDIR)/arch/$(LINUX_ARCH)/include/generated/uapi -I$(KRNDIR)/include/uapi \
	 -I$(KRNDIR)/include/generated/uapi \
	 -I$(LIBBPF)/src \
	 -include $(KRNDIR)/include/linux/kconfig.h \
	 -D__KERNEL__ \
	 -D__BPF_TRACING__ \
	 -D__TARGET_ARCH_$(LINUX_ARCH) \
	 -Wunused \
	 -Wno-frame-address \
	 -Wno-unused-value \
	 -Wno-unknown-warning-option \
	 -Wno-pragma-once-outside-header \
	 -Wno-pointer-sign \
	 -Wno-gnu-variable-sized-type-not-at-end \
	 -Wno-deprecated-declarations \
	 -Wno-compare-distinct-pointer-types \
	 -Wno-address-of-packed-member \
	 -fno-stack-protector \
	 -fno-jump-tables \
	 -fno-unwind-tables \
	 -fno-asynchronous-unwind-tables \
	 -xc -O2 -g -emit-llvm

SRCDIR=$(CURDIR)

SRCS_KERN:=$(wildcard $(SRCDIR)/*.c)
SRCN:=$(notdir $(SRCS_KERN))
SYSMONITOR = $(CURDIR)/system_monitor.c

RED=\033[0;31m
GREEN=\033[0;32m
CYAN=\033[0;36m
NC=\033[0m

.PHONY: all
all: chkdir syscall_test system_monitor.bpf.o system_monitor.container.bpf.o system_monitor.host.bpf.o

.PHONY: chkdir
chkdir:
ifeq (,$(wildcard $(KRNDIR)/Kconfig))
	@echo "Your kernel path[$(RED)$(KRNDIR)$(NC)] is incorrect. Use 'make KRNDIR=[KERNEL-SRC-PATH]'."
	Quitting 
else
	@echo "Using kernel path[$(GREEN)$(KRNDIR)$(NC)]"
endif
ifeq (,$(wildcard $(LIBBPF)/src/libbpf.c))
	git submodule update --init --recursive
endif
ifeq (,$(wildcard $(LIBBPF)/src/libbpf.a))
	make -C $(LIBBPF)/src
endif

.PHONY: syscall_test
syscall_test: tests/Makefile
	@make -C tests KRNDIR="$(KRNDIR)"

system_monitor.bpf.o: $(SYSMONITOR) syscall_test
	@echo "Compiling eBPF bytecode: $(GREEN)$@$(NC) ..."
	@echo "Using Compiler flags: $(CFlags)"
	$(Q)$(CL) $(KF) -DMONITOR_HOST_AND_CONTAINER $(CFlags) -c $< -o -| llc -march=bpf -mcpu=probe -filetype=obj -o $@

system_monitor.container.bpf.o: $(SYSMONITOR) syscall_test
	@echo "Compiling eBPF bytecode: $(GREEN)$@$(NC) ..."
	@echo "Using Compiler flags: $(CFlags)"
	$(Q)$(CL) $(KF) -DMONITOR_CONTAINER $(CFlags) -c $< -o -| llc -march=bpf -mcpu=probe -filetype=obj -o $@

system_monitor.host.bpf.o: $(SYSMONITOR) syscall_test
	@echo "Compiling eBPF bytecode: $(GREEN)$@$(NC) ..."
	@echo "Using Compiler flags: $(CFlags)"
	$(Q)$(CL) $(KF) -DMONITOR_HOST $(CFlags) -c $< -o -| llc -march=bpf -mcpu=probe -filetype=obj -o $@

# clean up
clean:
	@make -C tests clean
	$(Q)rm -rf *.o
